import OpenAI from 'openai';
import { db } from '../models/database';

interface SurveyData {
  name: string;
  age: number;
  currentGrade: string;
  interests: string[];
  skills: string[];
  academicScores: {
    [subject: string]: number;
  };
  careerGoals: string;
  learningStyle: string;
  workEnvironmentPreference: string;
}

interface AIAnalysisResult {
  recommendedMajors: RecommendedMajor[];
  analysisSummary: string;
  strengths: string[];
  recommendations: string[];
  confidenceScore: number;
  fullResponse: any;
}

interface RecommendedMajor {
  majorId: number;
  majorName: string;
  majorCode: string;
  matchScore: number;
  reasons: string[];
}

export class AIService {
  private openai: OpenAI;

  constructor() {
    if (!process.env.OPENAI_API_KEY) {
      console.warn('‚ö†Ô∏è OPENAI_API_KEY not found. AI features will be limited.');
    }

    this.openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY || 'demo-key',
    });
  }

  async analyzeCareerFit(surveyData: SurveyData): Promise<AIAnalysisResult> {
    try {
      // Get available majors from database
      const majors = await db.all(`
        SELECT id, name, code, description, career_prospects, required_skills, subjects
        FROM majors
      `);

      // Create AI prompt
      const prompt = this.createAnalysisPrompt(surveyData, majors);

      // Call OpenAI API
      const completion = await this.openai.chat.completions.create({
        model: "gpt-4",
        messages: [
          {
            role: "system",
            content: "B·∫°n l√† chuy√™n gia t∆∞ v·∫•n gi√°o d·ª•c v√† ngh·ªÅ nghi·ªáp t·∫°i FPT Polytechnic. H√£y ph√¢n t√≠ch th√¥ng tin h·ªçc sinh v√† ƒë∆∞a ra l·ªùi khuy√™n ch√≠nh x√°c, chi ti·∫øt b·∫±ng ti·∫øng Vi·ªát."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        temperature: 0.7,
        max_tokens: 2000,
      });

      const aiResponse = completion.choices[0]?.message?.content;
      
      if (!aiResponse) {
        throw new Error('No response from AI');
      }

      // Parse AI response and structure the result
      const analysisResult = this.parseAIResponse(aiResponse, majors);
      
      return {
        ...analysisResult,
        fullResponse: {
          prompt,
          response: aiResponse,
          model: "gpt-4",
          timestamp: new Date().toISOString()
        }
      };

    } catch (error: any) {
      console.error('‚ùå AI Analysis Error:', error);
      
      // Fallback to rule-based analysis if AI fails
      return this.fallbackAnalysis(surveyData);
    }
  }

  private createAnalysisPrompt(surveyData: SurveyData, majors: any[]): string {
    const majorsList = majors.map(m => 
      `- ${m.name} (${m.code}): ${m.description}`
    ).join('\n');

    return `
Ph√¢n t√≠ch th√¥ng tin h·ªçc sinh v√† ƒë∆∞a ra g·ª£i √Ω ng√†nh h·ªçc ph√π h·ª£p t·∫°i FPT Polytechnic:

TH√îNG TIN H·ªåC SINH:
- T√™n: ${surveyData.name}
- Tu·ªïi: ${surveyData.age}
- L·ªõp: ${surveyData.currentGrade}
- S·ªü th√≠ch: ${surveyData.interests.join(', ')}
- K·ªπ nƒÉng: ${surveyData.skills.join(', ')}
- ƒêi·ªÉm s·ªë c√°c m√¥n: ${JSON.stringify(surveyData.academicScores)}
- M·ª•c ti√™u ngh·ªÅ nghi·ªáp: ${surveyData.careerGoals}
- Phong c√°ch h·ªçc: ${surveyData.learningStyle}
- M√¥i tr∆∞·ªùng l√†m vi·ªác: ${surveyData.workEnvironmentPreference}

C√ÅC NG√ÄNH H·ªåC T·∫†I FPT POLYTECHNIC:
${majorsList}

Y√äU C·∫¶U PH√ÇN T√çCH:
1. ƒê√°nh gi√° ƒë·ªô ph√π h·ª£p c·ªßa t·ª´ng ng√†nh (ƒëi·ªÉm t·ª´ 0-100)
2. Ch·ªçn 3 ng√†nh ph√π h·ª£p nh·∫•t
3. Ph√¢n t√≠ch ƒëi·ªÉm m·∫°nh c·ªßa h·ªçc sinh
4. ƒê∆∞a ra khuy·∫øn ngh·ªã c·ª• th·ªÉ

ƒê·ªäNH D·∫†NG PH·∫¢N H·ªíI (JSON):
{
  "recommendedMajors": [
    {
      "majorName": "T√™n ng√†nh",
      "majorCode": "M√£ ng√†nh", 
      "matchScore": 85,
      "reasons": ["L√Ω do 1", "L√Ω do 2", "L√Ω do 3"]
    }
  ],
  "analysisSummary": "T√≥m t·∫Øt ph√¢n t√≠ch t·ªïng quan",
  "strengths": ["ƒêi·ªÉm m·∫°nh 1", "ƒêi·ªÉm m·∫°nh 2"],
  "recommendations": ["Khuy·∫øn ngh·ªã 1", "Khuy·∫øn ngh·ªã 2"],
  "confidenceScore": 0.85
}

H√£y ph√¢n t√≠ch k·ªπ l∆∞·ª°ng v√† ƒë∆∞a ra ph·∫£n h·ªìi JSON ch√≠nh x√°c.
    `;
  }

  private parseAIResponse(aiResponse: string, majors: any[]): Omit<AIAnalysisResult, 'fullResponse'> {
    try {
      // Extract JSON from AI response
      const jsonMatch = aiResponse.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('No JSON found in AI response');
      }

      const parsed = JSON.parse(jsonMatch[0]);

      // Map major names to IDs
      const recommendedMajors = parsed.recommendedMajors.map((rec: any) => {
        const major = majors.find(m => 
          m.name === rec.majorName || m.code === rec.majorCode
        );
        
        return {
          majorId: major?.id || 0,
          majorName: rec.majorName,
          majorCode: rec.majorCode,
          matchScore: rec.matchScore,
          reasons: rec.reasons || []
        };
      });

      return {
        recommendedMajors,
        analysisSummary: parsed.analysisSummary || '',
        strengths: parsed.strengths || [],
        recommendations: parsed.recommendations || [],
        confidenceScore: parsed.confidenceScore || 0.7
      };

    } catch (error) {
      console.error('‚ùå Failed to parse AI response:', error);
      throw new Error('Failed to parse AI analysis');
    }
  }

  private fallbackAnalysis(surveyData: SurveyData): AIAnalysisResult {
    console.log('üîÑ Using fallback rule-based analysis');

    // Advanced rule-based matching
    const recommendations: RecommendedMajor[] = [];
    const scores: {[key: string]: number} = {};

    // Calculate scores for each major based on multiple factors
    
    // IT Score
    let itScore = 60; // Base score
    if (surveyData.interests.includes('C√¥ng ngh·ªá th√¥ng tin')) itScore += 20;
    if (surveyData.skills.includes('L·∫≠p tr√¨nh')) itScore += 15;
    if (surveyData.skills.includes('T∆∞ duy logic')) itScore += 10;
    if (surveyData.academicScores.math >= 8) itScore += 15;
    if (surveyData.academicScores.physics >= 7) itScore += 10;
    if (surveyData.careerGoals.toLowerCase().includes('l·∫≠p tr√¨nh')) itScore += 10;
    scores['IT'] = Math.min(itScore, 98);

    // Design Score
    let designScore = 50;
    if (surveyData.interests.includes('Thi·∫øt k·∫ø ƒë·ªì h·ªça')) designScore += 25;
    if (surveyData.skills.includes('S√°ng t·∫°o')) designScore += 20;
    if (surveyData.skills.includes('Thi·∫øt k·∫ø')) designScore += 15;
    if (surveyData.interests.includes('Ngh·ªá thu·∫≠t')) designScore += 15;
    if (surveyData.learningStyle === 'visual') designScore += 10;
    scores['GD'] = Math.min(designScore, 95);

    // Marketing Score
    let marketingScore = 55;
    if (surveyData.interests.includes('Marketing')) marketingScore += 20;
    if (surveyData.skills.includes('Giao ti·∫øp')) marketingScore += 15;
    if (surveyData.skills.includes('Thuy·∫øt tr√¨nh')) marketingScore += 15;
    if (surveyData.workEnvironmentPreference === 'office') marketingScore += 5;
    if (surveyData.academicScores.english >= 7) marketingScore += 10;
    scores['MKT'] = Math.min(marketingScore, 92);

    // Accounting Score
    let accScore = 45;
    if (surveyData.interests.includes('K·∫ø to√°n')) accScore += 25;
    if (surveyData.skills.includes('T√≠nh to√°n')) accScore += 15;
    if (surveyData.academicScores.math >= 7) accScore += 15;
    if (surveyData.careerGoals.toLowerCase().includes('k·∫ø to√°n')) accScore += 10;
    scores['ACC'] = Math.min(accScore, 90);

    // Business Score
    let businessScore = 65;
    if (surveyData.interests.includes('Qu·∫£n tr·ªã kinh doanh')) businessScore += 20;
    if (surveyData.skills.includes('L√£nh ƒë·∫°o')) businessScore += 15;
    if (surveyData.skills.includes('Giao ti·∫øp')) businessScore += 10;
    if (surveyData.careerGoals.toLowerCase().includes('qu·∫£n l√Ω')) businessScore += 10;
    scores['BA'] = Math.min(businessScore, 88);

    // Electronics Score
    let electronicsScore = 50;
    if (surveyData.interests.includes('ƒêi·ªán t·ª≠ vi·ªÖn th√¥ng')) electronicsScore += 25;
    if (surveyData.academicScores.physics >= 8) electronicsScore += 15;
    if (surveyData.academicScores.math >= 7) electronicsScore += 10;
    if (surveyData.skills.includes('T∆∞ duy k·ªπ thu·∫≠t')) electronicsScore += 15;
    scores['ET'] = Math.min(electronicsScore, 85);

    // Sort by score and take top 3
    const sortedMajors = Object.entries(scores)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 3);

    const majorNames = {
      'IT': 'C√¥ng ngh·ªá th√¥ng tin',
      'GD': 'Thi·∫øt k·∫ø ƒë·ªì h·ªça', 
      'MKT': 'Marketing',
      'ACC': 'K·∫ø to√°n',
      'BA': 'Qu·∫£n tr·ªã kinh doanh',
      'ET': 'ƒêi·ªán t·ª≠ vi·ªÖn th√¥ng'
    };

    const majorIds = {
      'IT': 1, 'GD': 2, 'MKT': 3, 'ACC': 4, 'BA': 5, 'ET': 6
    };

    sortedMajors.forEach(([code, score]) => {
      const reasons = [];
      if (code === 'IT' && surveyData.academicScores.math >= 7) reasons.push('ƒêi·ªÉm to√°n cao');
      if (code === 'GD' && surveyData.skills.includes('S√°ng t·∫°o')) reasons.push('C√≥ kh·∫£ nƒÉng s√°ng t·∫°o');
      if (code === 'MKT' && surveyData.skills.includes('Giao ti·∫øp')) reasons.push('K·ªπ nƒÉng giao ti·∫øp t·ªët');
      
      reasons.push(`Ph√π h·ª£p v·ªõi s·ªü th√≠ch c·ªßa b·∫°n`);
      reasons.push(`Ph√π h·ª£p v·ªõi nƒÉng l·ª±c hi·ªán t·∫°i`);

      recommendations.push({
        majorId: majorIds[code as keyof typeof majorIds],
        majorName: majorNames[code as keyof typeof majorNames],
        majorCode: code,
        matchScore: Math.round(score),
        reasons: reasons.slice(0, 3)
      });
    });

    return {
      recommendedMajors: recommendations.slice(0, 3),
      analysisSummary: `D·ª±a tr√™n ph√¢n t√≠ch s·ªü th√≠ch v√† k·ªπ nƒÉng c·ªßa ${surveyData.name}, ch√∫ng t√¥i khuy·∫øn ngh·ªã c√°c ng√†nh h·ªçc ph√π h·ª£p v·ªõi ƒë·ªãnh h∆∞·ªõng ngh·ªÅ nghi·ªáp.`,
      strengths: ['C√≥ ƒë·ªông l·ª±c h·ªçc t·∫≠p', 'Quan t√¢m ƒë·∫øn t∆∞∆°ng lai'],
      recommendations: [
        'T√¨m hi·ªÉu th√™m v·ªÅ c√°c ng√†nh ƒë∆∞·ª£c g·ª£i √Ω',
        'Tham gia c√°c ho·∫°t ƒë·ªông th·ª±c t·∫ø ƒë·ªÉ kh√°m ph√° s·ªü th√≠ch',
        'Trao ƒë·ªïi v·ªõi gi√°o vi√™n v√† gia ƒë√¨nh v·ªÅ ƒë·ªãnh h∆∞·ªõng'
      ],
      confidenceScore: 0.6,
      fullResponse: {
        method: 'fallback-rule-based',
        timestamp: new Date().toISOString()
      }
    };
  }

  async generateChatResponse(message: string, context?: any): Promise<string> {
    // Always use fallback responses when no valid API key
    if (!process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY === 'demo-key') {
      console.log('üîÑ Using fallback chat response');
      return this.generateFallbackChatResponse(message);
    }

    try {
      const systemPrompt = `
B·∫°n l√† chatbot t∆∞ v·∫•n gi√°o d·ª•c c·ªßa FPT Polytechnic. 
H√£y tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ:
- C√°c ng√†nh h·ªçc t·∫°i FPT Polytechnic
- T∆∞ v·∫•n ƒë·ªãnh h∆∞·ªõng ngh·ªÅ nghi·ªáp
- Th√¥ng tin tuy·ªÉn sinh
- C∆° h·ªôi vi·ªác l√†m sau t·ªët nghi·ªáp

Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, th√¢n thi·ªán v√† h·ªØu √≠ch.
      `;

      const completion = await this.openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: message }
        ],
        temperature: 0.7,
        max_tokens: 500,
      });

      return completion.choices[0]?.message?.content || 'Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y l√∫c n√†y.';

    } catch (error) {
      console.error('‚ùå Chat AI Error:', error);
      return this.generateFallbackChatResponse(message);
    }
  }

  private generateFallbackChatResponse(message: string): string {
    const msg = message.toLowerCase();
    
    if (msg.includes('c√¥ng ngh·ªá th√¥ng tin') || msg.includes('it')) {
      return `Ng√†nh C√¥ng ngh·ªá th√¥ng tin t·∫°i FPT Polytechnic ƒë√†o t·∫°o v·ªÅ:
      
üîπ L·∫≠p tr√¨nh ·ª©ng d·ª•ng
üîπ Ph√°t tri·ªÉn web v√† mobile
üîπ Qu·∫£n tr·ªã c∆° s·ªü d·ªØ li·ªáu
üîπ B·∫£o m·∫≠t th√¥ng tin

**C∆° h·ªôi ngh·ªÅ nghi·ªáp:**
- L·∫≠p tr√¨nh vi√™n
- System Administrator
- DevOps Engineer
- Data Analyst

B·∫°n c√≥ mu·ªën bi·∫øt th√™m v·ªÅ y√™u c·∫ßu ƒë·∫ßu v√†o kh√¥ng?`;
    }

    if (msg.includes('thi·∫øt k·∫ø') || msg.includes('ƒë·ªì h·ªça')) {
      return `Ng√†nh Thi·∫øt k·∫ø ƒë·ªì h·ªça t·∫°i FPT Polytechnic:
      
üé® **N·ªôi dung h·ªçc:**
- Photoshop, Illustrator
- Typography v√† Color Theory  
- UI/UX Design
- Multimedia Design

üöÄ **Ngh·ªÅ nghi·ªáp:**
- Graphic Designer
- UI/UX Designer
- Art Director
- Brand Designer

Ng√†nh n√†y ph√π h·ª£p v·ªõi b·∫°n n√†o c√≥ kh·∫£ nƒÉng s√°ng t·∫°o v√† th·∫©m m·ªπ t·ªët!`;
    }

    if (msg.includes('marketing')) {
      return `Marketing t·∫°i FPT Polytechnic:
      
üìà **H·ªçc nh·ªØng g√¨:**
- Digital Marketing
- Social Media Marketing
- Content Marketing
- Analytics v√† Data

üíº **C∆° h·ªôi vi·ªác l√†m:**
- Marketing Manager
- Digital Marketer
- Content Creator
- Brand Manager

Ng√†nh n√†y c·∫ßn k·ªπ nƒÉng giao ti·∫øp v√† t∆∞ duy s√°ng t·∫°o!`;
    }

    if (msg.includes('k·∫ø to√°n')) {
      return `Ng√†nh K·∫ø to√°n t·∫°i FPT Polytechnic:
      
üí∞ **N·ªôi dung ƒë√†o t·∫°o:**
- K·∫ø to√°n t√†i ch√≠nh
- K·∫ø to√°n qu·∫£n tr·ªã
- Thu·∫ø v√† ki·ªÉm to√°n
- Ph·∫ßn m·ªÅm k·∫ø to√°n

üìä **Ngh·ªÅ nghi·ªáp:**
- K·∫ø to√°n vi√™n
- Ki·ªÉm to√°n vi√™n
- Chuy√™n vi√™n t√†i ch√≠nh
- T∆∞ v·∫•n thu·∫ø

Y√™u c·∫ßu t√≠nh ch√≠nh x√°c, t·ªâ m·ªâ v√† trung th·ª±c cao!`;
    }

    if (msg.includes('tuy·ªÉn sinh') || msg.includes('ƒëi·ªÅu ki·ªán')) {
      return `üìã **Th√¥ng tin tuy·ªÉn sinh FPT Polytechnic:**
      
‚úÖ **ƒêi·ªÅu ki·ªán:**
- T·ªët nghi·ªáp THPT
- Kh√¥ng c·∫ßn thi ƒë·∫ßu v√†o
- X√©t h·ªçc b·∫° ho·∫∑c k·∫øt qu·∫£ thi THPT

üìÖ **Th·ªùi gian:**
- Tuy·ªÉn sinh quanh nƒÉm
- Khai gi·∫£ng: Th√°ng 3, 6, 9, 12

üí∞ **H·ªçc ph√≠:** T·ª´ 15-20 tri·ªáu/nƒÉm t√πy ng√†nh

B·∫°n quan t√¢m ng√†nh n√†o c·ª• th·ªÉ?`;
    }

    // Default response
    return `Xin ch√†o! T√¥i l√† AI t∆∞ v·∫•n c·ªßa FPT Polytechnic. 

T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ:
üéì C√°c ng√†nh h·ªçc: IT, Thi·∫øt k·∫ø, Marketing, K·∫ø to√°n, Qu·∫£n tr·ªã KD
üìã Th√¥ng tin tuy·ªÉn sinh
üíº C∆° h·ªôi ngh·ªÅ nghi·ªáp
üìû T∆∞ v·∫•n ƒë·ªãnh h∆∞·ªõng

B·∫°n mu·ªën t√¨m hi·ªÉu v·ªÅ ng√†nh n√†o? H√£y h·ªèi t√¥i nh√©!`;
  }
}
