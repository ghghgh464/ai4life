import OpenAI from 'openai';
import { db } from '../models/database';

interface SurveyData {
  name: string;
  age: number;
  currentGrade: string;
  interests: string[];
  skills: string[];
  academicScores: {
    [subject: string]: number;
  };
  careerGoals: string;
  learningStyle: string;
  workEnvironmentPreference: string;
}

interface AIAnalysisResult {
  recommendedMajors: RecommendedMajor[];
  analysisSummary: string;
  strengths: string[];
  recommendations: string[];
  confidenceScore: number;
  fullResponse: any;
}

interface RecommendedMajor {
  majorId: number;
  majorName: string;
  majorCode: string;
  matchScore: number;
  reasons: string[];
}

export class AIService {
  private openai: OpenAI;

  constructor() {
    if (!process.env.OPENAI_API_KEY) {
      console.warn('‚ö†Ô∏è OPENAI_API_KEY not found. AI features will be limited.');
    }

    this.openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY || 'demo-key',
    });
  }

  async analyzeCareerFit(surveyData: SurveyData): Promise<AIAnalysisResult> {
    try {
      // Get available majors from database
      const majors = await db.all('SELECT * FROM majors');
      
      // If no API key, use fallback analysis
      if (!process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY === 'demo-key') {
        console.log('üîÑ Using fallback rule-based analysis');
        return this.fallbackAnalysis(surveyData);
      }

      console.log('ü§ñ Processing AI analysis for survey:', surveyData.name);

      const prompt = `
Analyze this student's career fit based on their survey data:

Name: ${surveyData.name}
Age: ${surveyData.age}
Current Grade: ${surveyData.currentGrade}
Interests: ${surveyData.interests.join(', ')}
Skills: ${surveyData.skills.join(', ')}
Academic Scores: ${JSON.stringify(surveyData.academicScores)}
Career Goals: ${surveyData.careerGoals}
Learning Style: ${surveyData.learningStyle}
Work Environment Preference: ${surveyData.workEnvironmentPreference}

Available Majors:
${majors.map((m: any) => `- ${m.name} (${m.code}): ${m.description}`).join('\n')}

Please provide a detailed analysis in JSON format with:
1. Top 3 recommended majors with match scores (0-100) and reasons
2. Analysis summary in Vietnamese
3. Student's strengths
4. Specific recommendations for improvement
5. Overall confidence score (0-100)

Format the response as valid JSON.
      `;

      const completion = await this.openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: [
          { role: "system", content: "You are an expert career counselor for Vietnamese students. Provide detailed, accurate analysis in Vietnamese language." },
          { role: "user", content: prompt }
        ],
        temperature: 0.7,
        max_tokens: 1500,
      });

      const response = completion.choices[0]?.message?.content;
      if (!response) {
        throw new Error('No response from OpenAI');
      }

      // Parse the JSON response
      const analysis = JSON.parse(response);
      
      return {
        recommendedMajors: analysis.recommendedMajors || [],
        analysisSummary: analysis.analysisSummary || 'Ph√¢n t√≠ch chi ti·∫øt v·ªÅ ph√π h·ª£p ngh·ªÅ nghi·ªáp.',
        strengths: analysis.strengths || ['C√≥ ƒë·ªông l·ª±c h·ªçc t·∫≠p'],
        recommendations: analysis.recommendations || ['Ti·∫øp t·ª•c ph√°t tri·ªÉn k·ªπ nƒÉng'],
        confidenceScore: analysis.confidenceScore || 85,
        fullResponse: analysis
      };

    } catch (error: any) {
      console.error('‚ùå AI Analysis Error:', error);
      console.log('üîÑ Using fallback rule-based analysis');
      return this.fallbackAnalysis(surveyData);
    }
  }

  private fallbackAnalysis(surveyData: SurveyData): AIAnalysisResult {
    console.log('üîÑ Using fallback rule-based analysis');

    // Advanced rule-based matching
    const recommendations: RecommendedMajor[] = [];
    const scores: {[key: string]: number} = {};

    // Calculate scores for each major based on multiple factors
    
    // IT Score
    let itScore = 60; // Base score
    if (surveyData.interests.includes('C√¥ng ngh·ªá th√¥ng tin')) itScore += 20;
    if (surveyData.skills.includes('L·∫≠p tr√¨nh')) itScore += 15;
    if (surveyData.skills.includes('T∆∞ duy logic')) itScore += 10;
    if (surveyData.academicScores.math >= 8) itScore += 15;
    if (surveyData.academicScores.physics >= 7) itScore += 10;
    if (surveyData.careerGoals.toLowerCase().includes('l·∫≠p tr√¨nh')) itScore += 10;
    scores['IT'] = Math.min(itScore, 98);

    // Design Score
    let designScore = 50;
    if (surveyData.interests.includes('Thi·∫øt k·∫ø ƒë·ªì h·ªça')) designScore += 25;
    if (surveyData.skills.includes('S√°ng t·∫°o')) designScore += 20;
    if (surveyData.skills.includes('Thi·∫øt k·∫ø')) designScore += 15;
    if (surveyData.interests.includes('Ngh·ªá thu·∫≠t')) designScore += 15;
    if (surveyData.learningStyle === 'visual') designScore += 10;
    scores['GD'] = Math.min(designScore, 95);

    // Marketing Score
    let marketingScore = 55;
    if (surveyData.interests.includes('Marketing')) marketingScore += 20;
    if (surveyData.skills.includes('Giao ti·∫øp')) marketingScore += 15;
    if (surveyData.skills.includes('Thuy·∫øt tr√¨nh')) marketingScore += 15;
    if (surveyData.workEnvironmentPreference === 'office') marketingScore += 5;
    if (surveyData.academicScores.english >= 7) marketingScore += 10;
    scores['MKT'] = Math.min(marketingScore, 92);

    // Sort by score and take top 3
    const sortedMajors = Object.entries(scores)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 3);

    const majorNames = {
      'IT': 'C√¥ng ngh·ªá th√¥ng tin',
      'GD': 'Thi·∫øt k·∫ø ƒë·ªì h·ªça', 
      'MKT': 'Marketing'
    };

    const majorIds = {
      'IT': 1, 'GD': 2, 'MKT': 3
    };

    sortedMajors.forEach(([code, score]) => {
      const reasons = [];
      if (code === 'IT' && surveyData.academicScores.math >= 7) reasons.push('ƒêi·ªÉm to√°n cao');
      if (code === 'GD' && surveyData.skills.includes('S√°ng t·∫°o')) reasons.push('C√≥ kh·∫£ nƒÉng s√°ng t·∫°o');
      if (code === 'MKT' && surveyData.skills.includes('Giao ti·∫øp')) reasons.push('K·ªπ nƒÉng giao ti·∫øp t·ªët');
      
      reasons.push(`Ph√π h·ª£p v·ªõi s·ªü th√≠ch c·ªßa b·∫°n`);
      reasons.push(`Ph√π h·ª£p v·ªõi nƒÉng l·ª±c hi·ªán t·∫°i`);

      recommendations.push({
        majorId: majorIds[code as keyof typeof majorIds],
        majorName: majorNames[code as keyof typeof majorNames],
        majorCode: code,
        matchScore: Math.round(score),
        reasons: reasons.slice(0, 3)
      });
    });

    return {
      recommendedMajors: recommendations.slice(0, 3),
      analysisSummary: `D·ª±a tr√™n ph√¢n t√≠ch s·ªü th√≠ch v√† k·ªπ nƒÉng c·ªßa ${surveyData.name}, ch√∫ng t√¥i khuy·∫øn ngh·ªã c√°c ng√†nh h·ªçc ph√π h·ª£p v·ªõi ƒë·ªãnh h∆∞·ªõng ngh·ªÅ nghi·ªáp.`,
      strengths: ['C√≥ ƒë·ªông l·ª±c h·ªçc t·∫≠p', 'Quan t√¢m ƒë·∫øn t∆∞∆°ng lai'],
      recommendations: ['Ti·∫øp t·ª•c ph√°t tri·ªÉn k·ªπ nƒÉng chuy√™n m√¥n', 'Tham gia c√°c ho·∫°t ƒë·ªông th·ª±c h√†nh'],
      confidenceScore: 80,
      fullResponse: {
        timestamp: new Date().toISOString()
      }
    };
  }

  async generateChatResponse(message: string, context?: any): Promise<string> {
    // Always use fallback responses when no valid API key
    if (!process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY === 'demo-key') {
      console.log('üîÑ Using fallback chat response');
      return this.generateFallbackChatResponse(message);
    }

    try {
      const systemPrompt = `
B·∫°n l√† chatbot t∆∞ v·∫•n gi√°o d·ª•c c·ªßa FPT Polytechnic. 
H√£y tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ:
- C√°c ng√†nh h·ªçc t·∫°i FPT Polytechnic
- T∆∞ v·∫•n ƒë·ªãnh h∆∞·ªõng ngh·ªÅ nghi·ªáp
- Th√¥ng tin tuy·ªÉn sinh
- C∆° h·ªôi vi·ªác l√†m sau t·ªët nghi·ªáp

Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, th√¢n thi·ªán v√† h·ªØu √≠ch.
      `;

      const completion = await this.openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: message }
        ],
        temperature: 0.7,
        max_tokens: 500,
      });

      return completion.choices[0]?.message?.content || 'Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y l√∫c n√†y.';

    } catch (error) {
      console.error('‚ùå Chat AI Error:', error);
      return this.generateFallbackChatResponse(message);
    }
  }

  private generateFallbackChatResponse(message: string): string {
    // Normalize Vietnamese characters and convert to lowercase
    const msg = message.toLowerCase().normalize('NFC');
    
    // Check for math concerns with IT interest (more flexible patterns)
    const mathConcerns = ['d·ªët to√°n', 'h·ªçc d·ªët to√°n', 'k√©m to√°n', 'y·∫øu to√°n', 'kh√¥ng gi·ªèi to√°n', 'to√°n k√©m', 'to√°n d·ªü', 'to√°n kh√¥ng t·ªët', 'kh√¥ng kh√° to√°n'];
    const itInterests = ['c√¥ng ngh·ªá th√¥ng tin', 'it', 'l·∫≠p tr√¨nh', 'ph·∫ßn m·ªÅm', 'm√°y t√≠nh', 'developer', 'coder', 'programmer'];
    
    const hasMathConcern = mathConcerns.some(concern => msg.includes(concern));
    const hasItInterest = itInterests.some(interest => msg.includes(interest));
    
    if (hasMathConcern && hasItInterest) {
      return `ü§î **H·ªçc d·ªët to√°n c√≥ th·ªÉ h·ªçc IT kh√¥ng?**

‚úÖ **Tin t·ªët:** HO√ÄN TO√ÄN ƒê∆Ø·ª¢C! Nhi·ªÅu l·∫≠p tr√¨nh vi√™n gi·ªèi kh√¥ng xu·∫•t th√¢n t·ª´ to√°n h·ªçc.

üìä **Th·ª±c t·∫ø v·ªÅ to√°n trong IT:**
‚Ä¢ 70% c√¥ng vi·ªác IT ch·ªâ c·∫ßn to√°n c∆° b·∫£n (c·ªông, tr·ª´, nh√¢n, chia)
‚Ä¢ Logic t∆∞ duy quan tr·ªçng h∆°n t√≠nh to√°n ph·ª©c t·∫°p
‚Ä¢ C√≥ c√¥ng c·ª• v√† th∆∞ vi·ªán h·ªó tr·ª£ m·ªçi ph√©p t√≠nh

üéØ **C√°c lƒ©nh v·ª±c IT √≠t c·∫ßn to√°n:**
‚Ä¢ Frontend Development (HTML, CSS, JavaScript)
‚Ä¢ Mobile App Development  
‚Ä¢ UI/UX Design
‚Ä¢ Software Testing

üí° **L·ªùi khuy√™n:**
‚Ä¢ T·∫≠p trung v√†o logic v√† t∆∞ duy thu·∫≠t to√°n
‚Ä¢ H·ªçc t·ª´ c∆° b·∫£n, t·ª´ t·ª´ x√¢y d·ª±ng n·ªÅn t·∫£ng
‚Ä¢ Th·ª±c h√†nh nhi·ªÅu h∆°n l√Ω thuy·∫øt

üöÄ B·∫°n c√≥ mu·ªën t√¥i t∆∞ v·∫•n l·ªô tr√¨nh h·ªçc IT ph√π h·ª£p v·ªõi ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu kh√¥ng?`;
    }

    // Check for drawing concerns with design interest
    const drawingConcerns = ['kh√¥ng bi·∫øt v·∫Ω', 'kh√¥ng gi·ªèi v·∫Ω', 'v·∫Ω d·ªü', 'ch∆∞a bi·∫øt v·∫Ω', 'v·∫Ω kh√¥ng ƒë·∫πp', 'kh√¥ng c√≥ t√†i nƒÉng v·∫Ω'];
    const designInterests = ['thi·∫øt k·∫ø', 'ƒë·ªì h·ªça', 'design', 'ui/ux', 'graphic', 'designer'];
    
    const hasDrawingConcern = drawingConcerns.some(concern => msg.includes(concern));
    const hasDesignInterest = designInterests.some(interest => msg.includes(interest));
    
    if (hasDrawingConcern && hasDesignInterest) {
      return `üé® **Kh√¥ng bi·∫øt v·∫Ω c√≥ h·ªçc ƒë∆∞·ª£c Thi·∫øt k·∫ø kh√¥ng?**

‚úÖ **Tin t·ªët:** C√ì TH·ªÇ H·ªåC ƒê∆Ø·ª¢C! Thi·∫øt k·∫ø hi·ªán ƒë·∫°i kh√°c xa v·ªõi v·∫Ω tay truy·ªÅn th·ªëng.

üñ•Ô∏è **Thi·∫øt k·∫ø s·ªë hi·ªán t·∫°i:**
‚Ä¢ 90% l√†m vi·ªác tr√™n m√°y t√≠nh (Photoshop, Illustrator)
‚Ä¢ C√≥ template v√† asset c√≥ s·∫µn
‚Ä¢ AI h·ªó tr·ª£ t·∫°o √Ω t∆∞·ªüng v√† n·ªôi dung
‚Ä¢ T·∫≠p trung v√†o √Ω t∆∞·ªüng h∆°n k·ªπ thu·∫≠t v·∫Ω

üéØ **K·ªπ nƒÉng quan tr·ªçng h∆°n v·∫Ω tay:**
‚Ä¢ T∆∞ duy s√°ng t·∫°o v√† th·∫©m m·ªπ
‚Ä¢ Hi·ªÉu t√¢m l√Ω kh√°ch h√†ng
‚Ä¢ Xu h∆∞·ªõng m√†u s·∫Øc, font ch·ªØ
‚Ä¢ K·ªπ nƒÉng s·ª≠ d·ª•ng ph·∫ßn m·ªÅm

üí° **L·ªùi khuy√™n:**
‚Ä¢ B·∫Øt ƒë·∫ßu h·ªçc Photoshop c∆° b·∫£n
‚Ä¢ Tham kh·∫£o thi·∫øt k·∫ø tr√™n Pinterest, Behance
‚Ä¢ Th·ª±c h√†nh l√†m poster, banner ƒë∆°n gi·∫£n

üöÄ Quan tr·ªçng l√† C·∫¢M TH·∫®M M·ª∏, kh√¥ng ph·∫£i tay ngh·ªÅ v·∫Ω! B·∫°n c√≥ th√≠ch m√†u s·∫Øc v√† b·ªë c·ª•c ƒë·∫πp kh√¥ng?`;
    }

    // Check for financial concerns
    const financialConcerns = ['gia ƒë√¨nh ngh√®o', 'kh√¥ng c√≥ ti·ªÅn', 'kinh t·∫ø kh√≥ khƒÉn', 'h·ªçc ph√≠ cao', 'kh√¥ng ƒë·ªß ti·ªÅn'];
    const hasFinancialConcern = financialConcerns.some(concern => msg.includes(concern));
    
    if (hasFinancialConcern) {
      return `üí∞ **Kh√≥ khƒÉn kinh t·∫ø c√≥ th·ªÉ h·ªçc ƒë∆∞·ª£c kh√¥ng?**

‚úÖ **ƒê·ª´ng lo l·∫Øng!** FPT Polytechnic c√≥ nhi·ªÅu ch√≠nh s√°ch h·ªó tr·ª£:

üéì **H·ªçc b·ªïng:**
‚Ä¢ H·ªçc b·ªïng 100% cho h·ªçc sinh gi·ªèi
‚Ä¢ H·ªçc b·ªïng 50% cho ho√†n c·∫£nh kh√≥ khƒÉn
‚Ä¢ H·ªçc b·ªïng t√†i nƒÉng ƒë·∫∑c bi·ªát

üí≥ **H·ªó tr·ª£ t√†i ch√≠nh:**
‚Ä¢ Tr·∫£ g√≥p h·ªçc ph√≠ 0% l√£i su·∫•t
‚Ä¢ Vay v·ªën ∆∞u ƒë√£i t·ª´ ng√¢n h√†ng
‚Ä¢ L√†m part-time t·∫°i tr∆∞·ªùng

üè¢ **C∆° h·ªôi vi·ªác l√†m:**
‚Ä¢ Th·ª±c t·∫≠p c√≥ l∆∞∆°ng t·ª´ nƒÉm 2
‚Ä¢ Job fair v·ªõi m·ª©c l∆∞∆°ng h·∫•p d·∫´n
‚Ä¢ Cam k·∫øt vi·ªác l√†m sau t·ªët nghi·ªáp

üí° **L·ªùi khuy√™n:** H√£y ƒëƒÉng k√Ω t∆∞ v·∫•n ƒë·ªÉ bi·∫øt c√°c ch∆∞∆°ng tr√¨nh h·ªó tr·ª£ c·ª• th·ªÉ!

B·∫°n mu·ªën bi·∫øt th√™m v·ªÅ h·ªçc b·ªïng n√†o?`;
    }

    // Greetings and general questions
    if (msg.includes('xin ch√†o') || msg.includes('hello') || msg.includes('hi') || msg === 'ch√†o' || 
        msg.includes('alo') || msg.includes('al√¥') || msg.includes('hey') || 
        msg === 'ch√†o b·∫°n' || msg === 'ch√†o em' || msg.includes('good morning') || 
        msg.includes('good afternoon') || msg.includes('good evening')) {
      const greetings = [
        `Ch√†o b·∫°n! üëã T√¥i l√† AI t∆∞ v·∫•n tuy·ªÉn sinh FPT Polytechnic. B·∫°n ƒëang quan t√¢m ng√†nh h·ªçc n√†o v·∫≠y?`,
        `Xin ch√†o! üéì R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n t√¨m hi·ªÉu v·ªÅ c√°c ng√†nh h·ªçc t·∫°i FPT Polytechnic. B·∫°n c·∫ßn t∆∞ v·∫•n g√¨?`,
        `Hi b·∫°n! ‚ú® T√¥i c√≥ th·ªÉ gi√∫p b·∫°n kh√°m ph√° c√°c c∆° h·ªôi h·ªçc t·∫≠p t·∫°i FPT Polytechnic. H√£y cho t√¥i bi·∫øt b·∫°n quan t√¢m ƒëi·ªÅu g√¨ nh√©!`,
        `Al√¥! üìû T√¥i ƒë√¢y, AI t∆∞ v·∫•n FPT Polytechnic. B·∫°n mu·ªën t√¨m hi·ªÉu ng√†nh h·ªçc n√†o ·∫°?`
      ];
      return greetings[Math.floor(Math.random() * greetings.length)];
    }

    // IT related
    if (msg.includes('c√¥ng ngh·ªá th√¥ng tin') || msg.includes('it') || msg.includes('l·∫≠p tr√¨nh') || msg.includes('ph·∫ßn m·ªÅm')) {
      const itResponses = [
        `üñ•Ô∏è **Ng√†nh C√¥ng ngh·ªá th√¥ng tin - L·ª±a ch·ªçn hot nh·∫•t hi·ªán nay!**

üìö **Ch∆∞∆°ng tr√¨nh h·ªçc:**
‚Ä¢ L·∫≠p tr√¨nh Java, Python, C#
‚Ä¢ Ph√°t tri·ªÉn Web & Mobile App  
‚Ä¢ Database & Cloud Computing
‚Ä¢ AI & Machine Learning c∆° b·∫£n

üíº **C∆° h·ªôi ngh·ªÅ nghi·ªáp:**
‚Ä¢ Fullstack Developer (15-30 tri·ªáu)
‚Ä¢ Mobile App Developer (12-25 tri·ªáu)
‚Ä¢ DevOps Engineer (20-40 tri·ªáu)
‚Ä¢ Data Analyst (15-35 tri·ªáu)

üéØ B·∫°n c√≥ mu·ªën bi·∫øt th√™m v·ªÅ l·ªô tr√¨nh h·ªçc ho·∫∑c ƒëi·ªÅu ki·ªán tuy·ªÉn sinh kh√¥ng?`,

        `üíª **IT t·∫°i FPT Polytechnic - N∆°i ∆∞∆°m m·∫ßm l·∫≠p tr√¨nh vi√™n!**

üî• **T·∫°i sao ch·ªçn IT:**
‚Ä¢ Ng√†nh c√≥ nhu c·∫ßu tuy·ªÉn d·ª•ng cao nh·∫•t
‚Ä¢ M·ª©c l∆∞∆°ng kh·ªüi ƒëi·ªÉm h·∫•p d·∫´n
‚Ä¢ C∆° h·ªôi l√†m vi·ªác remote, freelance
‚Ä¢ Ph√°t tri·ªÉn s·ª± nghi·ªáp nhanh

üõ†Ô∏è **C√¥ng ngh·ªá ƒë∆∞·ª£c h·ªçc:**
ReactJS, NodeJS, Flutter, Docker, AWS...

B·∫°n ƒë√£ c√≥ ki·∫øn th·ª©c l·∫≠p tr√¨nh n√†o ch∆∞a? T√¥i c√≥ th·ªÉ t∆∞ v·∫•n l·ªô tr√¨nh ph√π h·ª£p!`
      ];
      return itResponses[Math.floor(Math.random() * itResponses.length)];
    }

    // Random encouraging responses for unclear messages
    const randomResponses = [
      `üåü T√¥i hi·ªÉu b·∫°n ƒëang t√¨m hi·ªÉu v·ªÅ ƒë·ªãnh h∆∞·ªõng h·ªçc t·∫≠p. H√£y chia s·∫ª v·ªõi t√¥i: b·∫°n th√≠ch l√†m g√¨ trong th·ªùi gian r·∫£nh? T·ª´ ƒë√≥ t√¥i c√≥ th·ªÉ t∆∞ v·∫•n ng√†nh h·ªçc ph√π h·ª£p nh·∫•t!`,
      
      `üí° M·ªói ng√†nh h·ªçc ƒë·ªÅu c√≥ nh·ªØng ƒëi·ªÉm th√∫ v·ªã ri√™ng! B·∫°n c√≥ th·ªÉ k·ªÉ cho t√¥i nghe v·ªÅ nh·ªØng m√¥n h·ªçc y√™u th√≠ch ·ªü tr∆∞·ªùng kh√¥ng? T√¥i s·∫Ω g·ª£i √Ω ng√†nh ph√π h·ª£p!`,
      
      `üéØ ƒê·ªÉ t∆∞ v·∫•n ch√≠nh x√°c nh·∫•t, b·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt: b·∫°n l√† ng∆∞·ªùi th√≠ch s√°ng t·∫°o, t√≠nh to√°n, hay giao ti·∫øp? M·ªói t√≠nh c√°ch s·∫Ω ph√π h·ª£p v·ªõi nh·ªØng ng√†nh kh√°c nhau!`,
      
      `üöÄ FPT Polytechnic c√≥ nhi·ªÅu ng√†nh hot nh∆∞ IT, Thi·∫øt k·∫ø, Marketing... B·∫°n mu·ªën bi·∫øt ng√†nh n√†o c√≥ m·ª©c l∆∞∆°ng cao nh·∫•t? Hay c∆° h·ªôi vi·ªác l√†m t·ªët nh·∫•t?`
    ];

    return randomResponses[Math.floor(Math.random() * randomResponses.length)];
  }
}
