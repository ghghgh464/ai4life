{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  // 30 seconds for AI processing\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor for logging\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`üöÄ API Request: ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.url}`);\n  return config;\n}, error => {\n  console.error('‚ùå API Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(response => {\n  console.log(`‚úÖ API Response: ${response.status} ${response.config.url}`);\n  return response;\n}, error => {\n  var _error$response;\n  console.error('‚ùå API Response Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\n\n// Survey API\nexport const submitSurvey = async surveyData => {\n  try {\n    const response = await api.post('/survey/submit', surveyData);\n    if (response.data.success && response.data.data) {\n      return response.data.data;\n    } else {\n      throw new Error(response.data.error || 'Survey submission failed');\n    }\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || error.message || 'Network error');\n  }\n};\n\n// Results API\nexport const getConsultationResult = async resultId => {\n  try {\n    const response = await api.get(`/results/${resultId}`);\n    if (response.data.success && response.data.data) {\n      return response.data.data;\n    } else {\n      throw new Error(response.data.error || 'Failed to fetch result');\n    }\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || error.message || 'Network error');\n  }\n};\n\n// Chat API\nexport const sendChatMessage = async (message, sessionId) => {\n  try {\n    const response = await api.post('/ai/chat', {\n      message,\n      sessionId\n    });\n    if (response.data.success && response.data.data) {\n      return response.data.data;\n    } else {\n      throw new Error(response.data.error || 'Chat failed');\n    }\n  } catch (error) {\n    var _error$response4, _error$response4$data;\n    throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || error.message || 'Network error');\n  }\n};\n\n// Get chat history\nexport const getChatHistory = async sessionId => {\n  try {\n    const response = await api.get(`/ai/chat/${sessionId}`);\n    if (response.data.success && response.data.data) {\n      return response.data.data;\n    } else {\n      throw new Error(response.data.error || 'Failed to fetch chat history');\n    }\n  } catch (error) {\n    var _error$response5, _error$response5$data;\n    throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.error) || error.message || 'Network error');\n  }\n};\n\n// Health check\nexport const healthCheck = async () => {\n  try {\n    const response = await api.get('/health');\n    return response.status === 200;\n  } catch (error) {\n    return false;\n  }\n};\n\n// Export PDF\nexport const exportResultToPDF = async resultId => {\n  try {\n    const response = await api.get(`/results/${resultId}/pdf`, {\n      responseType: 'blob'\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response6, _error$response6$data;\n    throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.error) || error.message || 'PDF export failed');\n  }\n};\n\n// Generate QR Code\nexport const generateQRCode = async resultId => {\n  try {\n    const response = await api.get(`/results/${resultId}/qr`);\n    if (response.data.success && response.data.data) {\n      return response.data.data.qrCode;\n    } else {\n      throw new Error(response.data.error || 'QR code generation failed');\n    }\n  } catch (error) {\n    var _error$response7, _error$response7$data;\n    throw new Error(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.error) || error.message || 'Network error');\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","_error$response","data","message","submitSurvey","surveyData","post","success","Error","_error$response2","_error$response2$data","getConsultationResult","resultId","get","_error$response3","_error$response3$data","sendChatMessage","sessionId","_error$response4","_error$response4$data","getChatHistory","_error$response5","_error$response5$data","healthCheck","exportResultToPDF","responseType","_error$response6","_error$response6$data","generateQRCode","qrCode","_error$response7","_error$response7$data"],"sources":["C:/New folder/AIFORLIFe/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { SurveyData, ConsultationResult, ChatMessage, ApiResponse } from '../types';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 30000, // 30 seconds for AI processing\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor for logging\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    console.log(`üöÄ API Request: ${config.method?.toUpperCase()} ${config.url}`);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('‚ùå API Request Error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor for error handling\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log(`‚úÖ API Response: ${response.status} ${response.config.url}`);\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('‚ùå API Response Error:', error.response?.data || error.message);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Survey API\r\nexport const submitSurvey = async (surveyData: SurveyData): Promise<ConsultationResult> => {\r\n  try {\r\n    const response = await api.post<ApiResponse<ConsultationResult>>('/survey/submit', surveyData);\r\n    \r\n    if (response.data.success && response.data.data) {\r\n      return response.data.data;\r\n    } else {\r\n      throw new Error(response.data.error || 'Survey submission failed');\r\n    }\r\n  } catch (error: any) {\r\n    throw new Error(error.response?.data?.error || error.message || 'Network error');\r\n  }\r\n};\r\n\r\n// Results API\r\nexport const getConsultationResult = async (resultId: string): Promise<ConsultationResult> => {\r\n  try {\r\n    const response = await api.get<ApiResponse<ConsultationResult>>(`/results/${resultId}`);\r\n    \r\n    if (response.data.success && response.data.data) {\r\n      return response.data.data;\r\n    } else {\r\n      throw new Error(response.data.error || 'Failed to fetch result');\r\n    }\r\n  } catch (error: any) {\r\n    throw new Error(error.response?.data?.error || error.message || 'Network error');\r\n  }\r\n};\r\n\r\n// Chat API\r\nexport const sendChatMessage = async (\r\n  message: string, \r\n  sessionId?: string\r\n): Promise<{ response: string; sessionId: string }> => {\r\n  try {\r\n    const response = await api.post<ApiResponse<{ response: string; sessionId: string }>>(\r\n      '/ai/chat',\r\n      { message, sessionId }\r\n    );\r\n    \r\n    if (response.data.success && response.data.data) {\r\n      return response.data.data;\r\n    } else {\r\n      throw new Error(response.data.error || 'Chat failed');\r\n    }\r\n  } catch (error: any) {\r\n    throw new Error(error.response?.data?.error || error.message || 'Network error');\r\n  }\r\n};\r\n\r\n// Get chat history\r\nexport const getChatHistory = async (sessionId: string): Promise<ChatMessage[]> => {\r\n  try {\r\n    const response = await api.get<ApiResponse<ChatMessage[]>>(`/ai/chat/${sessionId}`);\r\n    \r\n    if (response.data.success && response.data.data) {\r\n      return response.data.data;\r\n    } else {\r\n      throw new Error(response.data.error || 'Failed to fetch chat history');\r\n    }\r\n  } catch (error: any) {\r\n    throw new Error(error.response?.data?.error || error.message || 'Network error');\r\n  }\r\n};\r\n\r\n// Health check\r\nexport const healthCheck = async (): Promise<boolean> => {\r\n  try {\r\n    const response = await api.get('/health');\r\n    return response.status === 200;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n};\r\n\r\n// Export PDF\r\nexport const exportResultToPDF = async (resultId: string): Promise<Blob> => {\r\n  try {\r\n    const response = await api.get(`/results/${resultId}/pdf`, {\r\n      responseType: 'blob',\r\n    });\r\n    \r\n    return response.data;\r\n  } catch (error: any) {\r\n    throw new Error(error.response?.data?.error || error.message || 'PDF export failed');\r\n  }\r\n};\r\n\r\n// Generate QR Code\r\nexport const generateQRCode = async (resultId: string): Promise<string> => {\r\n  try {\r\n    const response = await api.get<ApiResponse<{ qrCode: string }>>(`/results/${resultId}/qr`);\r\n    \r\n    if (response.data.success && response.data.data) {\r\n      return response.data.data.qrCode;\r\n    } else {\r\n      throw new Error(response.data.error || 'QR code generation failed');\r\n    }\r\n  } catch (error: any) {\r\n    throw new Error(error.response?.data?.error || error.message || 'Network error');\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}